2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619

trzeba zrobić tak, żeby przy np. czasie opóźnienia 5ms licznik amplitudy był 0.99999!
więc trzeba przerobić ten algorytm przeliczania amplitudy tak, żeby faktycznie te linie opadały 
w jednakowy sposób. trzeba dokładnie policzyć jak mają opadać te linie w zależności od czasu opóźnienia. 

przyjąć bardzo długi czas opóźnienia (maksymalny - granica) i zrobić większą filtrację dla dłuższych czasów.
Ale to tylko, jeżeli będzie działało już dobrze długie zanikanie krótkich linii, tylko wtedy ma to sens.
Bo jeżeli na końcu i tak słychać tylko długie linie, to bez sensu. Choć może to coś da jednak.

Przetestuję na dwóch liniach opóźniających czy to różne opadanie amplitudy w zależności od czasu opóźnienia
linii działa. 